* specs
** mailbox msg:
Reception: 
type: signup|forgotpwd|confirm


* TODO
** lock down temp db
** how to deal with backlog in mailboxes? 
** put a validate_doc_update on the mailboxes!!  
** enable cors for couchdb when initing
otherwise browser can't access it!!!
** if cb in mailbox is called with error auto fix it!!!
** mailboxes need to be locked down:
set security object
add appropriate doc_validate_update
** restart listeners to mailboxes when stopped
** setup logrotate for couchdb!! 
   http://wiki.apache.org/couchdb/Installing_on_Ubuntu
   http://java.dzone.com/articles/how-install-couch-db-15-ubuntu
** how to setup frontend cape.js?
With modules? So then we need bb-server!
But source needs to be in cape
Or just test in node, just don't use node dependencies,
and also test in test-cape now and then, to see if it has the same results?

** set npm version dependencies!!  
** setup basic comm between front and backend 
** hide follow under vouchdb.changes in the node version of vouchdb  
** replace jquery dependency in node and browser in vouchdb!!
replace vouch_couch with vouch_cradle on node
or factor out jquery on node   
or replace with request:
https://github.com/iriscouch/browser-request/

   
** couchdb needs to enable cors?
   

** couchdb is timing out the login and also the reps trying!!!
   
* research
** other logins than couchdb native
1. use couchdb pluggable auth mechanisms
2. put nodejs in front, forward to couch, but use password.js or something to
   authenticate via github/facebook/google/twitter etc   
* resources
 https://github.com/etrepum/couchperuser  
 https://github.com/pegli/couchdb-dbperuser-provisioning/blob/master/lib/provision.js  
 https://github.com/flatiron/cradle
 https://www.npmjs.org/package/couchdb-expired
 https://www.npmjs.org/package/couchdb-tools
 
 using continuous for changes feed and has email queue example in tests:
 https://github.com/mikeal/dbemitter

 Convert an NPM package command-line program into a web page:
 https://github.com/iriscouch/browser_bin
 
 Detect security issues, large or small, in a CouchDB server
 https://github.com/iriscouch/audit_couchdb
 
* pouchdb considerations
** replication persistence
They should never stop!!!
https://github.com/HubSpot/offline/
Automatically display online/offline indication to your users. #hubspot-open-source
http://pouchdb.com/api.html#replication
https://groups.google.com/forum/#!topic/pouchdb/9ywFZ6ceqNc
https://www.bountysource.com/issues/1034011-persistent-replications?utm_campaign=plugin&utm_content=tracker%2F52197&utm_medium=issues&utm_source=github
** replication size
How much to replicate and how to dump old data?
Without then deleting the docs on the server when removed from client in a
synced replication?

* good to know
  
** couchdb needs to serve pages.. 
  just load as attachment to doc and link to it as database/doc/attachment.html
** start a coucbd instance
   install build-couchdb, follow instructions in its readme
   https://github.com/jhs/build-couchdb
   see bin/couchdb and bin/couch.ini for starting it

** using follow on node, and vouchdb.changes on browser.
  longpoll on browser (vouchdb.changes), or perhaps event-source? 
  http://couchdb.readthedocs.org/en/latest/api/database/changes.html#event-source
   
** install  and start docker with couchdb
Install docker on Ubuntu 13.10 Saucy:
 https://docs.docker.com/installation/ubuntulinux/#ubuntu-raring-1304-and-saucy-1310-64-bit
Mint needs some extra packages, see bottom of page 
https://registry.hub.docker.com/u/klaemo/couchdb/
Start docker:
docker run -d -p 5984:5984 --name couchdb klaemo/couchdb

** reverse proxy for haproxy
https://github.com/foosel/OctoPrint/wiki/Reverse-proxy-configuration-examples

ction wait(couchdb, db, cb) {
    
    function change(error, change) {
        if(!error) {
            log(change);
            log(db + ": Change " + change.seq + " has " + Object.keys(change.doc).length + " fields");
        }
        else log._e(error);
    }

    var config = {
        db: 'http://' + couchdb.admin + ':' + couchdb.pwd + '@'  +
            couchdb.url + '/' + db,
        include_docs: true,
        since: "now"
    };
        log(config);
   l
** persona:
Add this script or download and include -that- <script
src="https://login.persona.org/include.js"></script> Include persona-buttons.css
Include cookie.js Include persona.js with the initPersona function Call it
before the app starts.  Add these functions to a controller:

    $scope.signout = function($event) { $event.preventDefault();
        console.log('Logging out'); navigator.id.logout();
        
    };
    
    $scope.signin = function($event) { $event.preventDefault();
        console.log('Logging in'); navigator.id.request(); };
    
Have this html snippet in the controller's scope somewhere: <div ng-show="true">
     <a ng-hide="signedIn" href="#" class="persona-button blue"
     ng-click="signin($event)"><span>Sign in</span></a> <a ng-show="signedIn"
     href="#" class="persona-button blue" ng-click="signout($event)"><span>Sign
     out</span></a> </div>
     
Add this to the server configuration to turn sessions on: ,sessions: { expires:
    30*24*60*60 //one month } Add the right emails to authorized_emails.js
    exports.list = [ 'michieljoris@gmail.com' ];

Add this to server.js ,signin = require("./signin.js") ,signout =
require("./signout.js") Add this to the post handlers ,"/signin": signin
,"/signout": signout After successfull signin $scope.signedIn is the user's
email address
	

* concepts 
** defry, describe and delimit
*** don't ever fucking repeat your self!
   if yes -> refactor!! 
*** describe what you're doing, 
   clear logical flow, descriptive naming, choice comments, few or no corner case
   handling or out of place logic, explicitly type or make clear what variables
   are supposed to contain, use name params instead of list etc
*** delimit
break up in modules, pure/independant functions, not bigger than my head per
function, clear global structure/architecture
** modules with functions not objects with methods
** librairies not frameworks
** quotes
*** Dijkstra:
    Industry suffers from the managerial dogma that for the sake of stability
    and continuity, the company should be independent of the competence of
    individual employees.
    
** 12factor    
   I. Codebase
     One codebase tracked in revision control, many deploys
   II. Dependencies
     Explicitly declare and isolate dependencies
   III. Config
     Store config in the environment
   IV. Backing Services
     Treat backing services as attached resources
   V. Build, release, run
     Strictly separate build and run stages
   VI. Processes
     Execute the app as one or more stateless processes
   VII. Port binding
     Export services via port binding
   VIII. Concurrency
     Scale out via the process model
   IX. Disposability
     Maximize robustness with fast startup and graceful shutdown
   X. Dev/prod parity
     Keep development, staging, and production as similar as possible
   XI. Logs
     Treat logs as event streams
   XII. Admin processes
     Run admin/management tasks as one-off processes
    
    
* doing
make sample signup/confirm/forgotpwd/resetpwd/login pages
- send msg to reception, so needs vouchdb
- worker needs to be able to send emails 
  
signup:
send signup msg to reception, with username, email and password 

confirm:
read uuid from url and send confirm msg to reception with uuid


